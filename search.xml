<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>first_blog</title>
    <url>/2022/01/04/first-blog/</url>
    <content><![CDATA[<p>2022年开始了，好好奋斗吧</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>清明节全网灰色主题实现原理</title>
    <url>/2022/01/05/second/</url>
    <content><![CDATA[<p>属性写法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter: grayscale();</span><br></pre></td></tr></table></figure>

<p>filter是 滤镜 属性，grayscale是 灰度 属性值，grayscale括号里面可以是0、1或者百分比、小数or something？<br>括号里的数值越大，灰得越彻底。数值越小，原本的五颜六色保留得越好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter: grayscale(100%);    </span><br><span class="line">-webkit-filter: grayscale(100%);    //兼容chrome和safari和2013年后Opera</span><br><span class="line">-moz-filter: grayscale(100%);     //兼容Firefox</span><br><span class="line">-ms-filter: grayscale(100%);     //兼容IE、Edge</span><br><span class="line">-o-filter: grayscale(100%);       //兼容2013年前的Opera</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码严谨进阶"><a href="#代码严谨进阶" class="headerlink" title="代码严谨进阶"></a>代码严谨进阶</h4><p>filter是CSS3的属性，我们知道一些较低版本的IE对CSS3的兼容性不是很好，但是老版本的IE中我们依然可以实现滤镜的效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter: url(data:image/svg+xml;utf8,<span class="comment">#grayscale);         //兼容IE10、IE11</span></span><br><span class="line">filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); //兼容IE6～9</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2022/01/06/%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<hr>
<h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p><strong>闭包</strong>是有权访问另一个函数作用域中变量的函数</p>
<h3 id="闭包变量存储的位置"><a href="#闭包变量存储的位置" class="headerlink" title="闭包变量存储的位置"></a>闭包变量存储的位置</h3><p>闭包中的变量存储的位置是堆内存。</p>
<ul>
<li>假如闭包中的变量存储在栈内存中，那么栈的回收 会把处于栈顶的变量自动回收。所以闭包中的变量如果处于栈中那么变量被销毁后，闭包中的变量就没有了。所以闭包引用的变量是出于堆内存中的。</li>
</ul>
<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ul>
<li>保护函数的私有变量不受外部的干扰。形成不销毁的栈内存。</li>
<li>保存，把一些函数内的值保存下来。闭包可以实现方法和属性的私有化。</li>
</ul>
<h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><p>闭包常被见于实现单例模式、柯里化、防抖、节流、模块化</p>
<p>1.单例模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function singleIns(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">singleIns.getInstance = (function () &#123;</span><br><span class="line">  var instance = null;</span><br><span class="line">  return function (name) &#123;</span><br><span class="line">    if (!this.instance) &#123;</span><br><span class="line">      this.instance = new singleIns(name);</span><br><span class="line">    &#125;</span><br><span class="line">    return this.instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">var a = singleIns.getInstance(&quot;a&quot;);</span><br><span class="line">var b = singleIns.getInstance(&quot;b&quot;);</span><br><span class="line">a === b; // true</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.柯里化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function curry(func) &#123;</span><br><span class="line">  return function curried(...args) &#123;</span><br><span class="line">    if (args.length &gt;= func.length) &#123;</span><br><span class="line">      func.apply(this, args);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return function (...args2) &#123;</span><br><span class="line">        curried.apply(this, args.concat(args2));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">// example</span><br><span class="line">function a(x, y, z) &#123;</span><br><span class="line">  console.log(x + y + z);</span><br><span class="line">&#125;</span><br><span class="line">var b = curry(a);</span><br><span class="line">b(1, 2, 3); // 6</span><br><span class="line">b(1, 2)(3); // 6</span><br><span class="line">b(1)(2, 3); // 6</span><br><span class="line">b(1)(2)(3); // 6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.防抖节流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 节流</span><br><span class="line">function throttle(fn, timeout) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    return function (...arg) &#123;</span><br><span class="line">        if(timer) return</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            fn.apply(this, arg)</span><br><span class="line">            timer = null</span><br><span class="line">        &#125;, timeout)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 防抖</span><br><span class="line">function debounce(fn, timeout)&#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    return function(...arg)&#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            fn.apply(this, arg)</span><br><span class="line">        &#125;, timeout)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用闭包需要注意什么"><a href="#使用闭包需要注意什么" class="headerlink" title="使用闭包需要注意什么"></a>使用闭包需要注意什么</h3><p>容易导致内存泄漏。闭包会携带包含其它的函数作用域，因此会比其他函数占用更多的内存。过度使用闭包会导致内存占用过多，所以要谨慎使用闭包。</p>
<hr>
<!-- [typera](https://www.typora.net/527.html) -->
]]></content>
  </entry>
</search>
